# Base Image
###############################################
FROM python:3.13-slim as python-base

# set environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=off \
    PIP_DISABLE_PIP_VERSION_CHECK=on \
    PIP_DEFAULT_TIMEOUT=100 \
    POETRY_HOME="/opt/poetry" \
    POETRY_VIRTUALENVS_IN_PROJECT=true \
    POETRY_NO_INTERACTION=1 \
    PYSETUP_PATH="/opt/pysetup" \
    VENV_PATH="/opt/pysetup/.venv"

# prepend poetry and venv to path
ENV PATH="$POETRY_HOME/bin:$VENV_PATH/bin:$PATH"

# Builder Image
###############################################
FROM python-base as builder

ENV PYTHONPATH="/usr/src/app"

# install system dependencies
RUN apt-get update && apt-get install -y  \
    build-essential \
    curl  \
    netcat  \
    gcc \
    postgresql \
    && rm -rf /var/lib/apt/lists/*

# install poetry
ENV POETRY_VERSION=1.2.0a2
RUN curl -sSL https://install.python-poetry.org | python3 -

# copy project requirement files here to ensure they will be cached.
WORKDIR $PYSETUP_PATH
COPY poetry.lock pyproject.toml ./

# install runtime deps - uses $POETRY_VIRTUALENVS_IN_PROJECT internally
RUN poetry install --no-root

# lint
WORKDIR "/usr/src/app"
RUN flake8 .
RUN black --exclude=migrations .
RUN isort .

# Final image
###############################################
FROM python-base as final

# set environment variables
ENV ENVIRONMENT prod
ENV TESTING 0

COPY --from=builder $VENV_PATH $VENV_PATH

# create directory for the app user
RUN mkdir -p /home/app

# create the app user
RUN addgroup --system app && adduser --system --group app

# create the appropriate directories
ENV HOME=/home/app
ENV APP_HOME=/home/app/web
RUN mkdir $APP_HOME
WORKDIR $APP_HOME

# add app
COPY . .

# chown all the files to the app user
RUN chown -R app:app $HOME

# change to the app user
USER app

# run gunicorn
CMD gunicorn --bind 0.0.0.0:$PORT app.main:app -k uvicorn.workers.UvicornWorker